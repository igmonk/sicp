;; Exercise 1.15
;;
;; The sine of an angle (specified in radians) can be computed by making use of
;; the approximation sin x ≈ x if x is sufficiently small, and the trigonometric identity
;;
;; sin(x) = 3sin(x/3) - 4sin^3(x/3)
;;
;; to reduce the size of the argument of sin.
;; (For purposes of this exercise an angle is considered 'sufficiently small' if
;; its magnitude is not greater than 0.1 radians.)
;;
;; These ideas are incorporated in the following procedures:

(define (cube x) (* x x x))

(define (p x) (- (* 3 x) (* 4 (cube x))))

(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))

;; (sine 0) ; 0
;; (sine 1) ; .8415945650055845
;; (sine 2) ; .9085328851396501

;; (sine 3.14)       ; 8.056774674223277e-4
;; (sine (/ 3.14 2)) ; .9999999959705563
;; (sine 12.15)      ; -.39980345741334


;; a. How many times is the procedure p applied when (sine 12.15) is evaluated?
;;
;; The current value of the angle is decreasing threefold each time the procedure p
;; is recursively invoked as long as the angle is not sufficiently small.
;;
;; Mathematical equivalent of that is:
;;
;; angle/3^n < 0.1
;;
;; where n is the number of times the angle is to be decreased by a factor of three, which,
;;         at the same time, is the number of times the procedure p is to be invoked.
;;
;; Let's solve for n:
;;
;; 3^n > angle/0.1
;; 3^n > 10 * angle
;; log3(3^n) > log3(10 * angle)
;; n > log3(10 * angle)
;;
;; Given the angle value of 12.15,
;; n > log3(10 * 12.15)
;; n > log3(121.5)
;; n > 4.3690702464
;;
;; Since, n must be a minimal integer satisfying the equation above, the following answer
;; is the solution to the problem:
;;
;; n = ceil(4.3690702464) = 5
;;
;; Hence, the procedure p is applied 5 times when (sine 12.15) is evaluated.


;; b. What is the order of growth in space and number of steps (as a function of a)
;; used by the process generated by the sine procedure when (sine a) is evaluated?
;;
;; The space required grows linearly with the input, because we need keep track
;; only of which nodes are above us in the tree at any point in the coomputation.
;; In other words, the space required is proportional to the maximum depth
;; of the tree.
;;
;; The number of steps required by a tree-recursive process is proportional to
;; the number of nodes in the tree.
;; The function sine generate a process that represents a tree consisting of one branch.
;; Therefore, the number of nodes will be equal to the maximum depth of the tree.
;;
;; Hence, both the space and number of steps required have the same order of growth.
;;
;; The previous section shows the growth in the number of the procedure p invocations, and,
;; thus, the number of levels in the process tree, as the input becomes larger:
;;
;; n > log3(10 * angle)
;; 
;; As a result, the space and number of steps required have θ(log(n)) order of growth.
;;
;; (Any logarithm can be used, since one can be converted to another by multiplying by a fixed constant.)
