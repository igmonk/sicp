;; Exercise 4.74
;;
;; Alyssa P. Hacker proposes to use a simpler version of stream-flatmap
;; in negate, lisp-value, and find-assertions.
;;
;; She observes that the procedure that is mapped over the frame stream
;; in these cases always produces either the empty stream or a singleton
;; stream, so no interleaving is needed when combining these streams.
;;
;; a. Fill in the missing expressions in Alyssa's program.

(define (simple-stream-flatmap proc s)
  (simple-flatten (stream-map proc s)))

(define (simple-flatten stream)
  (stream-map <??>
              (stream-filter <??> stream)))

;; b. Does the query system's behavior change if we change it
;;    in this way?


;; a. A simpler version of flatten-stream only needs to
;;    filter out empty streams and return the car-s of
;;    the remaining 1-element streams:

(define (simple-flatten stream)
  (stream-map stream-car
              (stream-filter stream-not-null? stream)))

(define (stream-not-null? s)
  (not (stream-null? s)))


;; b. Does the query system's behavior change if we change it
;;    in this way?
;;
;; The behavior is not expected to change due to the process
;; generated by interleave-delayed:

(define (interleave-delayed s1 delayed-s2)
  (if (stream-null? s1)
      (force delayed-s2)
      (cons-stream
       (stream-car s1)
       (interleave-delayed (force delayed-s2)
                           (delay (stream-cdr s1))))))

;; When invoked by negate, lisp-value, and find-assertions,
;; the argument s1 will always be either the empty stream or
;; a singleton stream, which will produce the sequence of
;; elements having the same order as in the stream to be
;; flattened.
;;
;; The same order of elements is preserved by the simpler
;; version of stream-flatmap, which takes the car-s of
;; the filtered input stream.
;;
;; Hence, the simpler version of stream-flatmap produces
;; the same elements in the same order when use by negate,
;; lisp-value, and find-assertions.


;; Tests

(load "test-utils.scm")
(load "microshaft.scm")

;; Ingest the assertions from 'microshaft.scm' into the data base.
(ingest-ms-assertions db)

;; Run the driver loop
(query-driver-loop)


;; Find all employees supervised by Ben Bitdiddle or Alyssa P. Hacker
(or (supervisor ?x (Bitdiddle Ben))
    (supervisor ?x (Hacker Alyssa P)))


;; Query results - Original stream flatmap
;;
;; (or (supervisor (tweakit lem e) (bitdiddle ben))
;;     (supervisor (tweakit lem e) (hacker alyssa p)))
;; (or (supervisor (reasoner louis) (bitdiddle ben))
;;     (supervisor (reasoner louis) (hacker alyssa p)))
;; (or (supervisor (fect cy d) (bitdiddle ben))
;;     (supervisor (fect cy d) (hacker alyssa p)))
;; (or (supervisor (hacker alyssa p) (bitdiddle ben))
;;     (supervisor (hacker alyssa p) (hacker alyssa p)))


;; Query results - Simple stream flatmap
;;
;; (or (supervisor (tweakit lem e) (bitdiddle ben))
;;     (supervisor (tweakit lem e) (hacker alyssa p)))
;; (or (supervisor (reasoner louis) (bitdiddle ben))
;;     (supervisor (reasoner louis) (hacker alyssa p)))
;; (or (supervisor (fect cy d) (bitdiddle ben))
;;     (supervisor (fect cy d) (hacker alyssa p)))
;; (or (supervisor (hacker alyssa p) (bitdiddle ben))
;;     (supervisor (hacker alyssa p) (hacker alyssa p)))
